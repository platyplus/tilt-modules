load('ext://helm_remote', 'helm_remote')

# ######################################################################################################
# def wait_for(url):
#     return """while [[ "$(curl -s -o /dev/null -w ''%{{http_code}}'' {})" != "200" ]]; do sleep 5; done""".format(url)

# DEFAULT_HASURA_SECRET = 'hasura-dev-secret'

# def hasura_console(release_name='',
#             path='.', 
#             hasura_resource_name='hasura',
#             hasura_secret=DEFAULT_HASURA_SECRET,
#             hasura_endpoint= 'http://localhost:8080',
#             wait_for_services=[]):
#     # * Wait for Hasura, then run the console locally
#     #  ? fetch admin secret from k8s?
#     #  "--admin-secret `kubectl get secret {} -o jsonpath='{{.data.adminSecret}}' | base64 -D`".format(hasura_resource),
#     console_options = '--project {} --endpoint {} --admin-secret {}'.format(
#         path,
#         hasura_endpoint,
#         hasura_secret
#     )
#     config = read_yaml(os.path.join(path, 'config.yaml'), False)
#     if not config:
#         local('mkdir -p {}'.format(os.path.join(path, '..')))
#         local('hasura init {} --version 3 --endpoint {}'.format(path, hasura_endpoint))
#         # * Bug in the latest hasura cli version - set metadata version.yaml to 3
#         # local('echo "version: 3" > {}'.format(
#         #     os.path.join(path, 'metadata/version.yaml')))

#     serve_cmds = [
#         'hasura migrate apply {} --all-databases'.format(console_options),
#         '[ $(wc -c <"{}/metadata/databases/databases.yaml") -ge 4 ] && hasura metadata apply {} || hasura metadata export {}'.format(path, console_options, console_options),
#         'hasura console {}'.format(console_options)
#     ]
#     hasura_resource = '{}-{}'.format(release_name,
#                                      hasura_resource_name) if release_name else hasura_resource_name
#     console_resource = '{}-hasura-console'.format(
#         release_name) if release_name else 'hasura-console'
#     local_resource(console_resource,
#                     '\n'.join([wait_for(x) for x in wait_for_services + ['{}/healthz'.format(hasura_endpoint)]]),
#                    resource_deps=[hasura_resource],
#                    serve_cmd=' && '.join(serve_cmds),
#                    allow_parallel=True,
#                    links=[link('http://localhost:9695/', 'Hasura Console')])


# ######################################################################################################




# # print(os.environ['PWD'])
# # print(os.path.join(os.environ['PWD'], './apps/test'))

# config.define_string('release_name')
# config.define_string('frontend_port')
# config.define_string('hasura_port')
# config.define_string('hasura_backend_plus_port')
# config.define_string('hasura_secret')
# config.define_string('postgres_password')
# config.define_string('path')

# cfg = config.parse()

# release_name = cfg.get('release_name', 'platyplus')
# frontend_port = cfg.get('frontend_port', '4200')
# hasura_port = cfg.get('hasura_port', '8080')
# hasura_backend_plus_port = cfg.get('hasura_backend_plus_port', '3000')
# hasura_secret = cfg.get('hasura_secret', 'hasura-dev-secret')
# postgres_password = cfg.get('postgres_password', 'fixed1234')
# path = os.path.join(os.environ['PWD'], cfg.get('path', '.'))

# helm_remote('platyplus',
#             repo_url='https://charts.platy.plus',
#             set=['global.ingress.enabled=false',
#                 'hasura-backend-plus.hasura.postgresql.postgresqlPassword={}'.format(postgres_password),
#                 'hasura-backend-plus.hasura.adminSecret={}'.format(hasura_secret),
#                 'frontend.configFile.values.hasuraUrl=http://localhost:{}/v1/graphql'.format(hasura_port),
#                 'frontend.configFile.values.authUrl=http://localhost:{}'.format(hasura_backend_plus_port)])

# k8s_resource('{}-frontend'.format(release_name),
#                 new_name='frontend',
#                 port_forwards='{}:80'.format(frontend_port))
# k8s_resource('{}-hasura-backend-plus'.format(release_name),
#                 new_name='hasura-backend-plus',
#                 port_forwards='{}:3000'.format(hasura_backend_plus_port))
# k8s_resource('{}-hasura'.format(release_name),
#                 new_name='hasura',
#                 port_forwards='{}:8080'.format(hasura_port))
# hasura_console(
#     release_name='',
#     hasura_resource_name='hasura',
#     path=path,
#     hasura_endpoint='http://localhost:{}'.format(hasura_port),
#     hasura_secret=hasura_secret)


load('../hasura-console/Tiltfile', 'hasura_console')
def platyplus(release_name='platyplus',
    frontend_port='4200',
    hasura_port='8080',
    hasura_backend_plus_port='3000',
    hasura_secret='hasura-dev-secret',
    postgres_password='fixed1234',
    path='.'):
    helm_remote('platyplus',
                repo_url='https://charts.platy.plus',
                set=['global.ingress.enabled=false',
                    'hasura-backend-plus.hasura.postgresql.postgresqlPassword={}'.format(postgres_password),
                    'hasura-backend-plus.hasura.adminSecret={}'.format(hasura_secret),
                    'frontend.configFile.values.hasuraUrl=http://localhost:{}/v1/graphql'.format(hasura_port),
                    'frontend.configFile.values.authUrl=http://localhost:{}'.format(hasura_backend_plus_port)])

    k8s_resource('{}-frontend'.format(release_name),
                    new_name='frontend',
                    port_forwards='{}:80'.format(frontend_port))
    k8s_resource('{}-hasura-backend-plus'.format(release_name),
                    new_name='hasura-backend-plus',
                    port_forwards='{}:3000'.format(hasura_backend_plus_port))
    k8s_resource('{}-hasura'.format(release_name),
                    new_name='hasura',
                    port_forwards='{}:8080'.format(hasura_port))
    hasura_console(
        release_name='',
        hasura_resource_name='hasura',
        path=path,
        hasura_endpoint='http://localhost:{}'.format(hasura_port),
        hasura_secret=hasura_secret)
